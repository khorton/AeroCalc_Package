--- io360a.py	(original)
+++ io360a.py	(refactored)
@@ -74,7 +74,7 @@
 # NOTES   1. Takes about 1.5e-5 sec per calculation on a 1.33 GHz PPC G4, so 
 #            this should be suitable for every record in the FT data.
 
-from __future__ import division
+
 import math as M
 import std_atm as SA
 import unit_conversion as U
@@ -410,7 +410,7 @@
     '18.18'
     """
     if pwr_seek <= 0:
-        raise ValueError, 'Power input must be positive.'
+        raise ValueError('Power input must be positive.')
     
     low = 0 # initial lower guess
     high = 35 # initial upper guess
@@ -424,11 +424,11 @@
     # confirm initial low and high are OK:
     pwr_low = pwr(rpm, low, altitude, temp)
     if pwr_low > pwr_seek:
-        raise ValueError, 'Initial low guess too high.'
+        raise ValueError('Initial low guess too high.')
     
     pwr_high = pwr(rpm, high, altitude, temp)
     if pwr_high < pwr_seek:
-        raise ValueError, 'Initial high guess too low.'
+        raise ValueError('Initial high guess too low.')
     
     guess = (low + high) / 2.
     pwr_guess = pwr(rpm, guess, altitude, temp)
@@ -476,7 +476,7 @@
     2423
     """
     if pwr_seek <= 0:
-        raise ValueError, 'Power input must be positive.'
+        raise ValueError('Power input must be positive.')
     
     low = 1000 # initial lower guess
     high = 3500 # initial upper guess
@@ -491,14 +491,14 @@
     pwr_low = pwr(low, mp, altitude, temp)
     # print "pwr_low=", pwr_low
     if pwr_low > pwr_seek:
-        raise ValueError, 'Initial low guess too high.'
+        raise ValueError('Initial low guess too high.')
     
     pwr_high = pwr(high, mp, altitude, temp)
     # print "pwr_high=", pwr_high
     if pwr_high < pwr_seek:
         # print "pwr_high=", pwr_high
-        print "Function called was IO.pwr(%f, %f, %f, %f)" % (high, mp, altitude, temp)
-        raise ValueError, 'Initial high guess too low.'
+        print("Function called was IO.pwr(%f, %f, %f, %f)" % (high, mp, altitude, temp))
+        raise ValueError('Initial high guess too low.')
     
     guess = (low + high) / 2.
     pwr_guess = pwr(guess, mp, altitude, temp)
@@ -543,7 +543,7 @@
     '18.18'
     """
     if percent_power <= 0:
-        raise ValueError, 'Power input must be positive.'
+        raise ValueError('Power input must be positive.')
     
     # convert units
     altitude = U.length_conv(altitude, from_units = alt_units, to_units = 'ft')
@@ -582,7 +582,7 @@
     2423
     """
     if percent_power <= 0:
-        raise ValueError, 'Power input must be positive.'
+        raise ValueError('Power input must be positive.')
     
     # convert units
     altitude = U.length_conv(altitude, from_units = alt_units, to_units = 'ft')
@@ -681,7 +681,7 @@
         ff1 = _pwr_ff_econ(rpm1, pwr)
         ff2 = _pwr_ff_econ(rpm2, pwr)
     else:
-        raise ValueError, 'mixture must be one of "econ" or "pwr"' 
+        raise ValueError('mixture must be one of "econ" or "pwr"') 
         
 #    else:
 #        raise ValueError, 'Invalid value for mixture.'
@@ -694,7 +694,7 @@
     elif ff_units == 'l/hr':
         ff = U.avgas_conv(ff, to_units = 'l')
     else:
-        raise ValueError, 'Invalid fuel flow units'
+        raise ValueError('Invalid fuel flow units')
     
     return ff
 
