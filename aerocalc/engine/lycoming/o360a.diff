--- o360a.py	(original)
+++ o360a.py	(refactored)
@@ -76,7 +76,7 @@
 # NOTES   1. Takes about 1.5e-5 sec per calculation on a 1.33 GHz PPC G4, so 
 #            this should be suitable for every record in the FT data.
 
-from __future__ import division
+
 import math as M
 import std_atm as SA
 import unit_conversion as U
@@ -369,7 +369,7 @@
 	'17.06'
 	"""
 	if pwr_seek <= 0:
-		raise ValueError, 'Power input must be positive.'
+		raise ValueError('Power input must be positive.')
 	
 	low = 0 # initial lower guess
 	high = 35 # initial upper guess
@@ -383,11 +383,11 @@
 	# confirm initial low and high are OK:
 	pwr_low = pwr(rpm, low, altitude, temp)
 	if pwr_low > pwr_seek:
-		raise ValueError, 'Initial low guess too high.'
+		raise ValueError('Initial low guess too high.')
 	
 	pwr_high = pwr(rpm, high, altitude, temp)
 	if pwr_high < pwr_seek:
-		raise ValueError, 'Initial high guess too low.'
+		raise ValueError('Initial high guess too low.')
 	
 	guess = (low + high) / 2.
 	pwr_guess = pwr(rpm, guess, altitude, temp)
@@ -435,7 +435,7 @@
 	2219
 	"""
 	if pwr_seek <= 0:
-		raise ValueError, 'Power input must be positive.'
+		raise ValueError('Power input must be positive.')
 	
 	low = 1000 # initial lower guess
 	high = 3500 # initial upper guess
@@ -450,11 +450,11 @@
 	# confirm initial low and high are OK:
 	pwr_low = pwr(low, mp, altitude, temp)
 	if pwr_low > pwr_seek:
-		raise ValueError, 'Initial low guess too high.'
+		raise ValueError('Initial low guess too high.')
 	
 	pwr_high = pwr(high, mp, altitude, temp)
 	if pwr_high < pwr_seek:
-		raise ValueError, 'Initial high guess too low.'
+		raise ValueError('Initial high guess too low.')
 	
 	guess = (low + high) / 2.
 # 	print 'Guess is:', guess
@@ -500,7 +500,7 @@
 	'17.06'
 	"""
 	if percent_power <= 0:
-		raise ValueError, 'Power input must be positive.'
+		raise ValueError('Power input must be positive.')
 	
 	# convert units
 	altitude = U.length_conv(altitude, from_units = alt_units, to_units = 'ft')
@@ -539,7 +539,7 @@
 	2423
 	"""
 	if percent_power <= 0:
-		raise ValueError, 'Power input must be positive.'
+		raise ValueError('Power input must be positive.')
 	
 	# convert units
 	altitude = U.length_conv(altitude, from_units = alt_units, to_units = 'ft')
@@ -549,7 +549,7 @@
 
 	pwr_seek = percent_power * 1.8
 # 	print 'Temp:', temp
-	print 'Power seeked:', pwr_seek
+	print('Power seeked:', pwr_seek)
 	rpm = pwr2rpm(pwr_seek, mp, altitude, temp)
 	
 	return rpm
